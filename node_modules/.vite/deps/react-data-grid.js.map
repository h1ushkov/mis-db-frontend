{
  "version": 3,
  "sources": ["../../react-data-grid/node_modules/clsx/dist/clsx.mjs", "../../react-data-grid/src/utils/colSpanUtils.ts", "../../react-data-grid/src/utils/domUtils.ts", "../../react-data-grid/src/utils/eventUtils.ts", "../../react-data-grid/src/utils/keyboardUtils.ts", "../../react-data-grid/src/utils/renderMeasuringCells.tsx", "../../react-data-grid/src/utils/selectedCellUtils.ts", "../../react-data-grid/src/style/cell.ts", "../../react-data-grid/src/utils/styleUtils.ts", "../../react-data-grid/src/utils/index.ts", "../../react-data-grid/src/cellRenderers/renderCheckbox.tsx", "../../react-data-grid/src/cellRenderers/renderToggleGroup.tsx", "../../react-data-grid/src/cellRenderers/renderValue.tsx", "../../react-data-grid/src/DataGridDefaultRenderersProvider.ts", "../../react-data-grid/src/cellRenderers/SelectCellFormatter.tsx", "../../react-data-grid/src/hooks/useRowSelection.ts", "../../react-data-grid/src/Columns.tsx", "../../react-data-grid/src/hooks/useCalculatedColumns.ts", "../../react-data-grid/src/hooks/useLayoutEffect.ts", "../../react-data-grid/src/hooks/useColumnWidths.ts", "../../react-data-grid/src/hooks/useGridDimensions.ts", "../../react-data-grid/src/hooks/useLatestFunc.ts", "../../react-data-grid/src/hooks/useRovingTabIndex.ts", "../../react-data-grid/src/hooks/useViewportColumns.ts", "../../react-data-grid/src/hooks/useViewportRows.ts", "../../react-data-grid/src/DragHandle.tsx", "../../react-data-grid/src/EditCell.tsx", "../../react-data-grid/src/GroupedColumnHeaderCell.tsx", "../../react-data-grid/src/renderHeaderCell.tsx", "../../react-data-grid/src/HeaderCell.tsx", "../../react-data-grid/src/style/row.ts", "../../react-data-grid/src/HeaderRow.tsx", "../../react-data-grid/src/GroupedColumnHeaderRow.tsx", "../../react-data-grid/src/Cell.tsx", "../../react-data-grid/src/Row.tsx", "../../react-data-grid/src/ScrollToCell.tsx", "../../react-data-grid/src/sortStatus.tsx", "../../react-data-grid/src/style/core.ts", "../../react-data-grid/src/SummaryCell.tsx", "../../react-data-grid/src/SummaryRow.tsx", "../../react-data-grid/src/DataGrid.tsx", "../../react-data-grid/src/GroupCell.tsx", "../../react-data-grid/src/GroupRow.tsx", "../../react-data-grid/src/TreeDataGrid.tsx", "../../react-data-grid/src/editors/textEditor.tsx"],
  "sourcesContent": ["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;", "import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n", "import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n", "import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n", "// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n", "import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n", "import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n", "import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n", "import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n", "import type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n", "import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function renderCheckbox({ onChange, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n", "import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n", "import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n", "import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n", "import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n", "import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n", "import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          isLastFrozenColumn: false,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultCellRenderer,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n", "// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n", "import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n", "import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize] as const;\n}\n", "import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n", "import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n", "import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n", "import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n", "import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n", "import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n", "import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport { type GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n", "import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = headerCell.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    if (event.dataTransfer.types.includes(dragDropKey)) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey);\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.HTMLAttributes<HTMLDivElement> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={sortable ? onKeyDown : undefined}\n      {...draggableProps}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <div\n          className={resizeHandleClassname}\n          onClick={stopPropagation}\n          onDoubleClick={onDoubleClick}\n          onPointerDown={onPointerDown}\n        />\n      )}\n    </div>\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n", "import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n", "import { memo, useId } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Position } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const dragDropKey = useId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n", "import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => JSX.Element;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n", "import { forwardRef, memo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n", "import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n", "import { css } from '@linaria/core';\n\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n      contain: content;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox to fix scrollbars */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n", "import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  RowSelectionChangeProvider,\n  RowSelectionProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable' | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: R) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n  /** Called when a column is reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current!.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    focusCellOrCellContent();\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const row = rows[position.rowIdx];\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function focusCellOrCellContent() {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n          {rows.length === 0 && noRowsFallback ? (\n            noRowsFallback\n          ) : (\n            <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + 1 + rowIdx;\n                const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    key={rowIdx}\n                    aria-rowindex={gridRowStart}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop\n                    showBorder={rowIdx === topSummaryRowsCount - 1}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n              {getViewportRows()}\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop={false}\n                    showBorder={rowIdx === 0}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n            </>\n          )}\n        </RowSelectionChangeProvider>\n      </DataGridDefaultRenderersProvider>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n", "import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozenLast } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  height,\n  groupBy,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n", "import { forwardRef, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, isCtrlKeyHeldDown } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  Column,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup } from './cellRenderers';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport DataGrid from './DataGrid';\nimport type { DataGridHandle, DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<\n    DataGridProps<R, SR, K>,\n    'columns' | 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill'\n  > {\n  columns: readonly Column<R, SR>[];\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nfunction TreeDataGrid<R, SR, K extends Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight: rawRowHeight,\n    rowKeyGetter: rawRowKeyGetter,\n    onCellKeyDown: rawOnCellKeyDown,\n    onRowsChange,\n    selectedRows: rawSelectedRows,\n    onSelectedRowsChange: rawOnSelectedRowsChange,\n    renderers,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    ...props\n  }: TreeDataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n\n    // Prevent copy/paste on group rows\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    indexes.forEach((index) => {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    });\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n\n  return (\n    <DataGrid<R, SR, Key>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      ref={ref}\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport default forwardRef(TreeDataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n", "import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],
  "mappings": "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",
  "names": ["getColSpan", "column", "lastFrozenColumnIndex", "args", "colSpan", "Number", "isInteger", "frozen", "idx", "undefined", "stopPropagation", "event", "scrollIntoView", "element", "inline", "block", "createCellEvent", "defaultPrevented", "cellEvent", "preventGridDefault", "isGridDefaultPrevented", "Object", "setPrototypeOf", "getPrototypeOf", "nonInputKeys", "Set", "isCtrlKeyHeldDown", "e", "ctrlKey", "metaKey", "key", "isDefaultCellInput", "has", "onEditorNavigation", "target", "HTMLInputElement", "HTMLTextAreaElement", "HTMLSelectElement", "closest", "querySelectorAll", "length", "measuringCellClassname", "renderMeasuringCells", "viewportColumns", "map", "minWidth", "maxWidth", "_jsx", "className", "style", "gridColumnStart", "isSelectedCellEditable", "selectedPosition", "columns", "rows", "row", "rowIdx", "isCellEditableUtil", "renderEditCell", "editable", "getSelectedCellColSpan", "topSummaryRows", "bottomSummaryRows", "mainHeaderRowIdx", "topSummaryRowsCount", "type", "getNextSelectedCellPosition", "moveUp", "moveNext", "cellNavigationMode", "colSpanColumns", "minRowIdx", "maxRowIdx", "currentPosition", "currentIdx", "currentRowIdx", "nextPosition", "isCellWithinBounds", "nextIdx", "nextRowIdx", "columnsCount", "setColSpan", "colIdx", "getParentRowIdx", "parent", "level", "setHeaderGroupColAndRowSpan", "nextColumn", "parentRowIdx", "found", "isAfterLastColumn", "isBeforeFirstColumn", "isLastRow", "isFirstRow", "nextParentRowIdx", "canExitGrid", "maxColIdx", "shiftKey", "atLastCellInRow", "atFirstCellInRow", "atLastRow", "atFirstRow", "cell", "cellClassname", "cellFrozen", "cellFrozenClassname", "cellFrozenLast", "cellFrozenLastClassname", "getRowStyle", "height", "getHeaderCellStyle", "rowSpan", "gridRowEnd", "paddingBlockStart", "insetBlockStart", "gridRowStart", "getCellStyle", "index", "gridColumnEnd", "insetInlineStart", "getCellClassname", "extraClasses", "clsx", "isLastFrozenColumn", "min", "max", "floor", "sign", "abs", "Math", "assertIsValidKeyGetter", "keyGetter", "Error", "clampColumnWidth", "width", "getHeaderCellRowSpan", "checkboxLabel", "checkboxLabelClassname", "checkboxInput", "checkboxInputClassname", "checkbox", "checkboxClassname", "checkboxLabelDisabled", "checkboxLabelDisabledClassname", "renderCheckbox", "onChange", "props", "handleChange", "checked", "nativeEvent", "_jsxs", "disabled", "children", "groupCellContent", "groupCellContentClassname", "caret", "caretClassname", "renderToggleGroup", "ToggleGroup", "groupKey", "isExpanded", "tabIndex", "toggleGroup", "handleKeyDown", "d", "onKeyDown", "viewBox", "renderValue", "DataGridDefaultRenderersContext", "createContext", "DataGridDefaultRenderersProvider", "Provider", "useDefaultRenderers", "useContext", "SelectCellFormatter", "value", "ariaLabel", "ariaLabelledBy", "RowSelectionContext", "RowSelectionProvider", "RowSelectionChangeContext", "RowSelectionChangeProvider", "useRowSelection", "rowSelectionContext", "rowSelectionChangeContext", "SELECT_COLUMN_KEY", "HeaderRenderer", "isRowSelected", "onRowSelectionChange", "SelectFormatter", "isShiftClick", "SelectGroupFormatter", "SelectColumn", "name", "resizable", "sortable", "renderHeaderCell", "renderCell", "renderGroupCell", "DEFAULT_COLUMN_WIDTH", "DEFAULT_COLUMN_MIN_WIDTH", "useCalculatedColumns", "rawColumns", "defaultColumnOptions", "getColumnWidth", "viewportWidth", "scrollLeft", "enableVirtualization", "defaultWidth", "defaultMinWidth", "defaultMaxWidth", "defaultCellRenderer", "defaultSortable", "defaultResizable", "defaultDraggable", "draggable", "headerRowsCount", "useMemo", "collectColumns", "rawColumn", "calculatedColumnParent", "headerCellClass", "push", "sort", "aKey", "frozenA", "bKey", "frozenB", "forEach", "updateColumnParent", "templateColumns", "layoutCssVars", "totalFrozenColumnWidth", "columnMetrics", "Map", "left", "set", "columnMetric", "get", "i", "colOverscanStartIdx", "colOverscanEndIdx", "viewportLeft", "viewportRight", "lastColIdx", "firstUnfrozenColumnIdx", "colVisibleStartIdx", "colVisibleEndIdx", "useLayoutEffect", "window", "useEffect", "useOriginalLayoutEffect", "useColumnWidths", "gridRef", "gridWidth", "resizedColumnWidths", "measuredColumnWidths", "setResizedColumnWidths", "setMeasuredColumnWidths", "onColumnResize", "prevGridWidthRef", "useRef", "columnsCanFlex", "ignorePreviouslyMeasuredColumns", "current", "newTemplateColumns", "columnsToMeasure", "gridTemplateColumns", "join", "updateMeasuredWidths", "newMeasuredColumnWidths", "hasChanges", "measuredWidth", "measureColumnWidth", "delete", "handleColumnResize", "nextWidth", "resizingKey", "flushSync", "newResizedColumnWidths", "selector", "CSS", "escape", "measuringCell", "querySelector", "getBoundingClientRect", "useGridDimensions", "inlineSize", "setInlineSize", "useState", "blockSize", "setBlockSize", "ResizeObserver", "clientWidth", "clientHeight", "offsetWidth", "offsetHeight", "initialWidth", "initialHeight", "resizeObserver", "entries", "size", "contentBoxSize", "observe", "disconnect", "useLatestFunc", "fn", "ref", "callbackFn", "useCallback", "useRovingTabIndex", "isSelected", "isChildFocused", "setIsChildFocused", "onFocus", "currentTarget", "isFocusable", "childTabIndex", "useViewportColumns", "rowOverscanStartIdx", "rowOverscanEndIdx", "startIdx", "updateStartIdx", "useViewportRows", "rowHeight", "scrollTop", "totalRowHeight", "gridTemplateRows", "getRowTop", "getRowHeight", "findRowIdx", "offset", "rowPositions", "currentRowHeight", "position", "top", "validateRowIdx", "start", "end", "middle", "currentOffset", "overscanThreshold", "rowVisibleStartIdx", "rowVisibleEndIdx", "cellDragHandle", "cellDragHandleFrozenClassname", "cellDragHandleClassname", "DragHandle", "columnWidth", "latestDraggedOverRowIdx", "isCellEditable", "onRowsChange", "onFill", "onClick", "setDragging", "setDraggedOverRowIdx", "handleMouseDown", "preventDefault", "buttons", "addEventListener", "onMouseOver", "onMouseUp", "removeEventListener", "handleDragEnd", "overRowIdx", "startRowIndex", "endRowIndex", "updateRows", "handleDoubleClick", "startRowIdx", "endRowIdx", "sourceRow", "updatedRows", "indexes", "updatedRow", "columnKey", "targetRow", "getStyle", "marginEnd", "isLastColumn", "marginInlineEnd", "marginBlockEnd", "onMouseDown", "onDoubleClick", "cellEditing", "EditCell", "onRowChange", "closeEditor", "navigate", "frameRequestRef", "commitOnOutsideClick", "editorOptions", "commitOnOutsideMouseDown", "onClose", "onWindowCaptureMouseDown", "requestAnimationFrame", "capture", "cancelFrameRequest", "cancelAnimationFrame", "mode", "commitChanges", "shouldFocusCell", "onEditorRowChange", "commitChangesAndFocus", "cellClass", "displayCellContent", "role", "onMouseDownCapture", "_Fragment", "GroupedColumnHeaderCell", "isCellSelected", "selectCell", "headerSortCellClassname", "headerSortName", "headerSortNameClassname", "sortDirection", "priority", "SortableHeaderCell", "renderSortStatus", "cellSortableClassname", "cellResizable", "cellResizableClassname", "resizeHandleClassname", "cellDraggableClassname", "cellDragging", "cellDraggingClassname", "cellOver", "cellOverClassname", "HeaderCell", "onColumnsReorder", "sortColumns", "onSortColumnsChange", "shouldFocusGrid", "direction", "dragDropKey", "isDragging", "setIsDragging", "isOver", "setIsOver", "isRtl", "sortIndex", "findIndex", "sortColumn", "ariaSort", "defaultRenderHeaderCell", "onPointerDown", "pointerType", "pointerId", "headerCell", "parentElement", "right", "clientX", "onPointerMove", "onLostPointerCapture", "setPointerCapture", "onSort", "ctrlClick", "sortDescendingFirst", "nextSort", "nextSortColumn", "nextSortColumns", "splice", "handleFocus", "onDragStart", "dataTransfer", "setData", "dropEffect", "onDragEnd", "onDragOver", "onDrop", "types", "includes", "sourceKey", "getData", "onDragEnter", "isEventPertinent", "onDragLeave", "draggableProps", "relatedTarget", "contains", "rowClassname", "rowSelected", "rowSelectedClassname", "rowSelectedWithFrozenCell", "headerRow", "headerRowClassname", "HeaderRow", "selectedCellIdx", "useId", "cells", "memo", "GroupedColumnHeaderRow", "renderedParents", "add", "cellCopied", "cellCopiedClassname", "cellDraggedOver", "cellDraggedOverClassname", "Cell", "isCopied", "isDraggedOver", "onContextMenu", "isEditable", "selectCellWrapper", "openEditor", "handleClick", "handleContextMenu", "handleRowChange", "newRow", "Row", "copiedCellIdx", "draggedOverCellIdx", "selectedCellEditor", "onCellClick", "onCellDoubleClick", "onCellContextMenu", "rowClass", "onMouseEnter", "handleDragEnter", "RowComponent", "forwardRef", "defaultRenderRow", "ScrollToCell", "scrollToPosition", "gridElement", "setScrollToCellPosition", "removeScrollToCell", "observer", "IntersectionObserver", "root", "threshold", "gridColumn", "gridRow", "arrow", "arrowClassname", "renderSortIcon", "renderSortPriority", "rootClassname", "viewportDragging", "viewportDraggingClassname", "focusSinkClassname", "focusSinkHeaderAndSummaryClassname", "summaryCellClassname", "SummaryCell", "summaryCellClass", "renderSummaryCell", "summaryRow", "topSummaryRow", "topSummaryRowBorderClassname", "bottomSummaryRowBorderClassname", "summaryRowClassname", "topSummaryRowClassname", "SummaryRow", "bottom", "isTop", "showBorder", "ariaRowIndex", "DataGrid", "rowKeyGetter", "rawRowHeight", "headerRowHeight", "rawHeaderRowHeight", "summaryRowHeight", "rawSummaryRowHeight", "selectedRows", "onSelectedRowsChange", "onCellKeyDown", "onSelectedCellChange", "onScroll", "onCopy", "onPaste", "rawEnableVirtualization", "renderers", "rawDirection", "rawRole", "ariaDescribedBy", "rawAriaRowCount", "testId", "defaultRenderers", "renderRow", "defaultRenderSortStatus", "defaultRenderCheckbox", "noRowsFallback", "setScrollTop", "setScrollLeft", "copiedCell", "setCopiedCell", "draggedOverRowIdx", "setOverRowIdx", "setScrollToPosition", "gridHeight", "bottomSummaryRowsCount", "summaryRowsCount", "headerAndTopSummaryRowsCount", "groupedColumnHeaderRowsCount", "setSelectedPosition", "prevSelectedPosition", "lastSelectedRowIdx", "focusSinkRef", "shouldFocusCellRef", "isTreeGrid", "headerRowsHeight", "isSelectable", "leftKey", "rightKey", "ariaRowCount", "defaultGridComponents", "allRowsSelected", "every", "minColIdx", "selectedCellIsWithinSelectionBounds", "isCellWithinSelectionBounds", "selectedCellIsWithinViewportBounds", "isCellWithinViewportBounds", "handleColumnResizeLatest", "onColumnsReorderLastest", "onSortColumnsChangeLatest", "onCellClickLatest", "onCellDoubleClickLatest", "onCellContextMenuLatest", "selectRowLatest", "selectRow", "handleFormatterRowChangeLatest", "updateRow", "selectCellLatest", "selectHeaderCellLatest", "isSamePosition", "focus", "preventScroll", "focusCellOrCellContent", "useImperativeHandle", "scrollToCell", "scrollToIdx", "scrollToRowIdx", "isRowIdxWithinViewportBounds", "newSelectedRows", "rowKey", "previousRowIdx", "indexOf", "step", "Element", "isCellEvent", "isRowEvent", "keyCode", "cKey", "vKey", "handleCopy", "handlePaste", "handleCellInput", "handleScroll", "commitEditorChanges", "sourceColumnKey", "targetColumn", "updatedTargetRow", "targetColumnKey", "originalRow", "isColIdxWithinSelectionBounds", "isCellWithinEditBounds", "enableEditor", "samePosition", "getCellToScroll", "getNextPosition", "nextRowY", "nextSelectedCellPosition", "getDraggedOverCellIdx", "elementToFocus", "renderDragHandle", "getCellEditor", "getRowViewportColumns", "selectedColumn", "slice", "getViewportRows", "rowElements", "selectedIdx", "selectedRowIdx", "viewportRowIdx", "isRowOutsideViewport", "rowColumns", "c", "templateRows", "isGroupRowFocused", "scrollPaddingInlineStart", "scrollPaddingBlock", "dir", "Array", "from", "_", "summaryRowIdx", "isSummaryRowSelected", "gridEl", "p1", "p2", "GroupCell", "id", "childRows", "groupColumnIndex", "isGroupByColumn", "toggleGroupWrapper", "isLevelMatching", "cursor", "groupRow", "groupRowClassname", "GroupedRow", "groupBy", "handleSelectGroup", "setSize", "posInSet", "TreeDataGrid", "rawRows", "rawRowKeyGetter", "rawOnCellKeyDown", "rawSelectedRows", "rawOnSelectedRowsChange", "rawGroupBy", "rowGrouper", "expandedGroupIds", "onExpandedGroupIdsChange", "rawRenderRow", "toggleGroupLatest", "groupedRows", "rowsCount", "groupRows", "groupByKey", "remainingGroupByKeys", "groupRowsCount", "groups", "childGroups", "childRowsCount", "isGroupRow", "allGroupRows", "flattenedRows", "expandGroup", "parentId", "isReadonlyArray", "keys", "getParentRowAndIndex", "parentRow", "parentRowAndIndex", "groupIndex", "isGroupRowSelected", "cr", "newRawSelectedRows", "handleRowsChange", "updatedRawRows", "rawIndexes", "rawIndex", "groupId", "newExpandedGroupIds", "rowProps", "arr", "isArray", "textEditorInternalClassname", "textEditorClassname", "autoFocusAndSelect", "input", "select", "textEditor", "onBlur"]
}
